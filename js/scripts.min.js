function burgerMenu(){const e=document.querySelector(".burger"),t=document.querySelector(".menu"),s=document.querySelector("body"),l=document.querySelector(".menu__login"),n=document.querySelectorAll("section");e.addEventListener("click",(()=>{t.classList.contains("active")?(t.classList.remove("active"),e.classList.remove("active-burger"),s.classList.remove("locked"),l.classList.remove("active-bottom"),n.forEach((e=>{e.style.filter="blur(0)"}))):(t.classList.add("active"),e.classList.add("active-burger"),s.classList.add("locked"),l.classList.add("active-bottom"),n.forEach((e=>{e.style.filter="blur(3px)"})))})),window.addEventListener("resize",(()=>{window.innerWidth>991.98&&(t.classList.remove("active"),e.classList.remove("active-burger"),s.classList.remove("locked"),l.classList.remove("active-bottom"),n.forEach((e=>{e.style.filter="blur(0)"})))}))}burgerMenu();const getTemplate=(e=[],t,s)=>{let l=t??"placeholder не указан";const n=e.map((e=>{let t="";return e.id===s&&(l=e.value,t="selected"),`\n          <li class="select__item ${t}" data-type="item" data-id="${e.id}" data-google-lang="${e.lang}">${e.value} </li>\n      `}));return`\n      <input type="hidden" class="hidden__input" >\n      <div class="select__backdrop" data-type="backdrop"></div>\n      <div class="select__input" data-type="input">\n          <span data-type="value">${l}</span>\n          <svg \n          data-type="arrow" \n          class="global select__arrow"\n          width="24"\n          height="24"\n          viewBox="0 0 24 24"\n          fill="none"\n          xmlns="http://www.w3.org/2000/svg"\n        >\n          <path\n            d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"\n            stroke="#D1D1D7"\n            stroke-width="2"\n            stroke-linecap="round"\n            stroke-linejoin="round"\n          />\n          <path\n            d="M2 12H22"\n            stroke="#D1D1D7"\n            stroke-width="2"\n            stroke-linecap="round"\n            stroke-linejoin="round"\n          />\n          <path\n            d="M12 2C14.5013 4.73835 15.9228 8.29203 16 12C15.9228 15.708 14.5013 19.2616 12 22C9.49872 19.2616 8.07725 15.708 8 12C8.07725 8.29203 9.49872 4.73835 12 2V2Z"\n            stroke="#D1D1D7"\n            stroke-width="2"\n            stroke-linecap="round"\n            stroke-linejoin="round"\n          />\n        </svg>\n        <svg\n          data-type="arrow" \n          class="select__arrow"\n          width="6"\n          height="5"\n          viewBox="0 0 6 5"\n          fill="none"\n          xmlns="http://www.w3.org/2000/svg"\n        >\n          <path\n            class="arrow-fill"\n            d="M3 5L5.59808 0.5H0.401924L3 5Z"\n            fill="#D1D1D7"\n          />\n        </svg>\n      </div>\n      <div class="select__dropdown">\n          <ul class="select__list">\n              ${n.join("")}\n          </ul>\n      </div>\n  `};class Select{constructor(e,t){this.$el=document.querySelector(e),this.options=t,this.selectedId=t.selectedId,this.render(),this.setup()}render(){const{placeholder:e,data:t}=this.options;this.$el.classList.add("select"),this.$el.innerHTML=getTemplate(t,e,this.selectedId)}setup(){this.clickHandler=this.clickHandler.bind(this),this.$el.addEventListener("click",this.clickHandler),this.$arrow=this.$el.querySelectorAll('[data-type="arrow"]'),this.$value=this.$el.querySelector('[data-type="value"]')}clickHandler(e){const{type:t}=e.target.dataset;if("input"===t)this.toggle();else if("item"===t){const t=e.target.dataset.id;this.select(t)}else"backdrop"===t&&this.close()}get isOpen(){return this.$el.classList.contains("open")}get current(){return this.options.data.find((e=>e.id===this.selectedId))}select(e){this.selectedId=e,this.$value.textContent=this.current.value,this.$el.querySelectorAll('[data-type="item"]').forEach((e=>e.classList.remove("selected"))),this.$el.querySelector(`[data-id="${e}"]`).classList.add("selected"),this.options.onSelect&&this.options.onSelect(this.current),this.close()}toggle(){this.isOpen?this.close():this.open()}open(){this.$el.classList.add("open"),this.$arrow.forEach((e=>{e.classList.add("open")}))}close(){this.$el.classList.remove("open"),this.$arrow.forEach((e=>{e.classList.remove("open")}))}destroy(){this.$el.removeEventListener("click",this.clickHandler),this.$el.innerHTML=""}}const select=new Select("#select",{placeholder:"Eng",selectedId:"1",data:[{id:"1",value:"Eng",lang:"en"},{id:"2",value:"Ukr",lang:"ua"},{id:"3",value:"Rus",lang:"ru"}],onSelect(e){document.querySelector(".hidden__input").value=e.value}});function mouseover(){const e=document.querySelectorAll(".learn__list-item"),t=document.querySelectorAll(".item__bottom-btn"),s=document.querySelector(".learn"),l=document.lastChild.clientWidth;for(let n=0;n<e.length;n++){l>1433?s.style.height=s.clientHeight+"px":l<1433&&l>633?s.style.height=s.clientHeight-8+"px":(console.log(l),s.style.height=s.clientHeight-28+"px");const i=e[n].clientHeight-t[n].clientHeight-28;let c=e[n].clientHeight-t[n].clientHeight,o=e[n].clientHeight+t[n].clientHeight,a=0;e[n].style.maxHeight=i+"px",e[n].addEventListener("mouseover",(()=>{0===a&&(e[n].style.maxHeight=o+"px",t[n].classList.add("active"),a=1)})),e[n].addEventListener("mouseleave",(()=>{1===a&&(c=i,e[n].style.maxHeight=c+"px",t[n].classList.remove("active"),a=0)}))}}mouseover();